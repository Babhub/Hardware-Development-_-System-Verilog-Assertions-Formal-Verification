`timescale 1ns / 1ps

module traffic_light_controller (
    input wire clk,
    input wire reset_n,
    output reg ns_green,
    output reg ns_yellow,
    output reg ns_red,
    output reg ew_green,
    output reg ew_yellow,
    output reg ew_red
);

// State encoding
parameter STATE_NS_GREEN  = 2'b00;
parameter STATE_NS_YELLOW = 2'b01;
parameter STATE_EW_GREEN  = 2'b10;
parameter STATE_EW_YELLOW = 2'b11;

reg [1:0] current_state, next_state;
reg [6:0] timer;

// State and timer update
always @(posedge clk or negedge reset_n) begin
    if (!reset_n) begin
        current_state <= STATE_NS_GREEN;
        timer <= 7'd0;
    end else begin
        current_state <= next_state;
        timer <= (timer == 7'd63 || timer == 7'd3) ? 7'd0 : timer + 1;
    end
end

// Next state logic
always @(*) begin
    case (current_state)
        STATE_NS_GREEN:
            next_state = (timer == 7'd63) ? STATE_NS_YELLOW : STATE_NS_GREEN;
        STATE_NS_YELLOW:
            next_state = (timer == 7'd3) ? STATE_EW_GREEN : STATE_NS_YELLOW;
        STATE_EW_GREEN:
            next_state = (timer == 7'd63) ? STATE_EW_YELLOW : STATE_EW_GREEN;
        STATE_EW_YELLOW:
            next_state = (timer == 7'd3) ? STATE_NS_GREEN : STATE_EW_YELLOW;
        default:
            next_state = STATE_NS_GREEN;
    endcase
end

// Output logic
always @(*) begin
    // Default all outputs to 0
    ns_green = 0; ns_yellow = 0; ns_red = 0;
    ew_green = 0; ew_yellow = 0; ew_red = 0;

    case (current_state)
        STATE_NS_GREEN: begin
            ns_green = 1; ns_yellow = 0; ns_red = 0;
            ew_green = 0; ew_yellow = 0; ew_red = 1;
        end
        STATE_NS_YELLOW: begin
            ns_green = 0; ns_yellow = 1; ns_red = 0;
            ew_green = 0; ew_yellow = 0; ew_red = 1;
        end
        STATE_EW_GREEN: begin
            ns_green = 0; ns_yellow = 0; ns_red = 1;
            ew_green = 1; ew_yellow = 0; ew_red = 0;
        end
        STATE_EW_YELLOW: begin
            ns_green = 0; ns_yellow = 0; ns_red = 1;
            ew_green = 0; ew_yellow = 1; ew_red = 0;
        end
    endcase
end

endmodule
